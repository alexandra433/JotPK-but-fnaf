//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Objects/UsePowerUp.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UsePowerUp : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UsePowerUp()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UsePowerUp"",
    ""maps"": [
        {
            ""name"": ""UseItem"",
            ""id"": ""1191a86b-ef9b-4a8e-a747-c548375ac6e3"",
            ""actions"": [
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Button"",
                    ""id"": ""43451fe9-b76d-4909-a8d0-051b397871df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8bd67be9-4c91-4034-be8f-dea7b2030291"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UseItem
        m_UseItem = asset.FindActionMap("UseItem", throwIfNotFound: true);
        m_UseItem_UseItem = m_UseItem.FindAction("UseItem", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UseItem
    private readonly InputActionMap m_UseItem;
    private IUseItemActions m_UseItemActionsCallbackInterface;
    private readonly InputAction m_UseItem_UseItem;
    public struct UseItemActions
    {
        private @UsePowerUp m_Wrapper;
        public UseItemActions(@UsePowerUp wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseItem => m_Wrapper.m_UseItem_UseItem;
        public InputActionMap Get() { return m_Wrapper.m_UseItem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UseItemActions set) { return set.Get(); }
        public void SetCallbacks(IUseItemActions instance)
        {
            if (m_Wrapper.m_UseItemActionsCallbackInterface != null)
            {
                @UseItem.started -= m_Wrapper.m_UseItemActionsCallbackInterface.OnUseItem;
                @UseItem.performed -= m_Wrapper.m_UseItemActionsCallbackInterface.OnUseItem;
                @UseItem.canceled -= m_Wrapper.m_UseItemActionsCallbackInterface.OnUseItem;
            }
            m_Wrapper.m_UseItemActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UseItem.started += instance.OnUseItem;
                @UseItem.performed += instance.OnUseItem;
                @UseItem.canceled += instance.OnUseItem;
            }
        }
    }
    public UseItemActions @UseItem => new UseItemActions(this);
    public interface IUseItemActions
    {
        void OnUseItem(InputAction.CallbackContext context);
    }
}
